@page "/"
@using Assignment1.Data
@using Assignment1.Models
@using System.ComponentModel.DataAnnotations;
@inject IAdultService AdultService

<h4>Adults:</h4>
@if (adults == null)
{
    <p><em>Loading...</em></p>
}
else if (!adults.Any())
{
    <p><em>No adult items exist. Please add some.</em></p>
}
else
{
    DisplaySearch();
    DisplayList();

    <div style="color:red">@errorMessage</div>
}

@code {
    private IList<Adult> adults;
    private String searchinput = "";
    private String errorMessage;
    [ValidFilter]
    private String filter = "--Select Filter--";
    private static List<string> filters = new[] {"--Select Filter--", "First Name", "Last Name", "Hair Color", "Eye Color",
            "Age Min", "Age Max", "Height Min", "Height Max","Weight Min", "Weight Max", "Male", "Female", "Job"}.ToList();

    protected override async Task OnInitializedAsync()
    {
        await Task.Run(() => adults = AdultService.GetAdults());

    }

    public class ValidFilter : ValidationAttribute
    {
        protected override ValidationResult IsValid(object value, ValidationContext validationContext)
        {
            if (filters == null || filters.Contains(value.ToString().ToLower()))
            {
                return ValidationResult.Success;
            }
            string validString = "";
            foreach (var item in filters)
            {
                validString += " " + item.ToString();

            }
            return new ValidationResult("Valid search filters are:" + validString + ".");
        }
    }
}
@{
    void DisplayAdults(IList<Adult> adultsToDisplay)
    {
        <table class="table">
            <thead>
                <tr>
                    <th>Id</th>
                    <th>First Name</th>
                    <th>Last Name</th>
                    <th>Hair Color</th>
                    <th>Eye Color</th>
                    <th>Age</th>
                    <th>Height</th>
                    <th>Weight</th>
                    <th>Sex</th>
                    <th>Job</th>

                </tr>
            </thead>
            <tbody>
             
                @foreach (var item in adultsToDisplay)
                {
                    <tr>
                        <td>@item.Id</td>
                        <td>@item.FirstName</td>
                        <td>@item.LastName</td>
                        <td>@item.HairColor</td>
                        <td>@item.EyeColor</td>
                        <td>@item.Age</td>
                        <td>@item.Height</td>
                        <td>@item.Weight</td>
                        <td>@item.Sex</td>
                        <td>@item.JobTitle</td>
                    </tr>
                }
            </tbody>
        </table>
        <div style="color:red">@errorMessage</div>
    }

    async Task DisplaySearch()
    {
        errorMessage = "";
        bool selectionMade = false;
        try
        {
            <div class="form-group">
                <label>Search</label>
                <input type="text" placeholder="" @bind-value="searchinput" />
            </div>
            <div class="form-group">
                <select class="form-control selectpicker" @bind="filter">
                    @foreach (var item in filters)
                    {
                        if (!selectionMade)
                        {
                            <option value="@item.ToString()" selected>@item.ToString()</option>
                            selectionMade = true;
                        }
                        else
                        {
                            <option value="@item.ToString()">@item.ToString()</option>
                        }
                    }
                </select>
            </div>
        }
        catch (Exception e)
        {
            errorMessage = e.Message;
        }
    }

    async Task DisplayList()
    {
        errorMessage = "";
        try
        {
            IList
            <Adult>
                adultsToDisplay = new List<Adult>
                    ();
            if (!filter.Equals("--Select Filter--"))
            {
                foreach (var item in adults)
                {
                    switch (filter)
                    {
                        case "First Name":
                            if (item.FirstName.ToLower().Contains(searchinput.ToLower()) && !searchinput.Equals("") && searchinput.Length >= 2 || item.FirstName.ToLower().Equals(searchinput.ToLower()) && !searchinput.Equals("") && searchinput.Length >= 2) adultsToDisplay.Add(item);
                            break;
                        case "Last Name":
                            if (item.LastName.ToLower().Contains(searchinput.ToLower()) && !searchinput.Equals("") && searchinput.Length >= 2 || item.LastName.ToLower().Equals(searchinput.ToLower()) && !searchinput.Equals("") && searchinput.Length >= 2) adultsToDisplay.Add(item);
                            break;
                        case "Hair Color":
                            if (item.HairColor.ToLower().Contains(searchinput.ToLower()) && !searchinput.Equals("") && searchinput.Length >= 2 || item.HairColor.ToLower().Equals(searchinput.ToLower()) && !searchinput.Equals("") && searchinput.Length >= 2) adultsToDisplay.Add(item);
                            break;
                        case "Eye Color":
                            if (item.EyeColor.ToLower().Contains(searchinput.ToLower()) && !searchinput.Equals("") && searchinput.Length >= 2 || item.EyeColor.ToLower().Equals(searchinput.ToLower()) && !searchinput.Equals("") && searchinput.Length >= 2) adultsToDisplay.Add(item);
                            break;
                        case "Age Max":
                            if (item.Age <= Int32.Parse(searchinput) && !searchinput.Equals("")) adultsToDisplay.Add(item);
                            break;
                        case "Height Max":
                            if (item.Height <= Int32.Parse(searchinput) && !searchinput.Equals("")) adultsToDisplay.Add(item);
                            break;
                        case "Weight Max":
                            if (item.Weight <= Int32.Parse(searchinput) && !searchinput.Equals("")) adultsToDisplay.Add(item);
                            break;
                        case "Age Min":
                            if (item.Age >= Int32.Parse(searchinput) && !searchinput.Equals("")) adultsToDisplay.Add(item);
                            break;
                        case "Height Min":
                            if (item.Height >= Int32.Parse(searchinput) && !searchinput.Equals("")) adultsToDisplay.Add(item);
                            break;
                        case "Weight Min":
                            if (item.Weight >= Int32.Parse(searchinput) && !searchinput.Equals("")) adultsToDisplay.Add(item);
                            break;
                        case "Male":
                            if (item.Sex.Equals("M")) adultsToDisplay.Add(item);
                            break;
                        case "Female":
                            if (item.Sex.Equals("F")) adultsToDisplay.Add(item);
                            break;
                        case "Job":
                            if (item.JobTitle.ToLower().Contains(searchinput.ToLower()) && !searchinput.Equals("") && searchinput.Length >= 2 || item.JobTitle.ToLower().Equals(searchinput.ToLower()) && !searchinput.Equals("") && searchinput.Length >= 2) adultsToDisplay.Add(item);
                            break;
                        default:
                            break;
                    }
                }
                DisplayAdults(adultsToDisplay);
            }
            else
            {
                DisplayAdults(adults);
            }
        }
        catch (Exception e)
        {
            errorMessage = e.Message;
        }
    }
}